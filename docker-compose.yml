version: '3.8'

services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: pokemon
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - sentinel

  # Serviço da aplicação Node.js (API Pokémon)
  api:
    build:
      context: .
    container_name: pokemon-api
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - db
      - otel-collector
    networks:
      - sentinel

  # Interface de visualização de métricas e logs
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    networks:
      - sentinel

  # Coleta e armazena métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - sentinel

  # Armazena logs estruturados
  loki:
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./config/loki-config.yaml:/etc/loki/config.yaml
    networks:
      - sentinel

  # Agente intermediário para coletar traces, logs e métricas
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-config.yaml"]
    volumes:
      - ./config/otel-config.yaml:/etc/otel-config.yaml
    ports:
      - "4317:4317"  # OTLP gRPC
      - "4318:4318"  # OTLP HTTP
      - "9464:9464"  # Prometheus Metrics
    depends_on:
      - prometheus
    networks:
      - sentinel

volumes:
  grafana-storage:
  pgdata:

networks:
  sentinel:

# ============================ DOCUMENTAÇÃO ============================
#
# Este arquivo docker-compose.yml define os serviços necessários para
# o monitoramento e rastreamento da aplicação Node.js com:
#
# - db: Banco de dados PostgreSQL
# - api: Aplicação Node.js que envia logs, métricas e traces
# - grafana: Interface de visualização de métricas e logs
# - prometheus: Coleta e armazena métricas
# - loki: Armazena logs estruturados
# - otel-collector: Agente intermediário que coleta e exporta
#   dados observáveis para Prometheus, Grafana, etc.
#
# As configurações específicas de cada ferramenta estão localizadas
# na pasta ./config para manter a organização e facilitar a manutenção.
