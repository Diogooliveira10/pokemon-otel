version: '3.8'

services:
  # Banco de dados PostgreSQL
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: admin                     # Usuário padrão do banco
      POSTGRES_PASSWORD: admin                 # Senha do usuário
      POSTGRES_DB: pokemon_logs                # Nome do banco criado automaticamente
    ports:
      - "5432:5432"                            # Mapeia a porta do host para o container
    volumes:
      - pgdata:/var/lib/postgresql/data        # Volume persistente para os dados
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql  # Script de inicialização para criar a tabela 'logs'
    networks:
      - sentinel
    healthcheck:                               # Healthcheck para garantir que o DB está pronto antes da API subir
      test: ["CMD", "pg_isready", "-U", "admin"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Aplicação principal (API Pokémon com observabilidade via OpenTelemetry)
  api:
    build:
      context: .                               # Usa o Dockerfile da raiz do projeto
    container_name: pokemon-api
    ports:
      - "3000:3000"                            # Porta da API
    env_file:
      - .env                                   # Arquivo com variáveis de ambiente
    depends_on:                                # Espera o banco e o collector estarem prontos
      db:
        condition: service_healthy
      otel-collector:
        condition: service_started
    networks:
      - sentinel

  # Interface gráfica para observabilidade (Dashboards, Logs e Métricas)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"                            # Porta 3001 no host → 3000 no container
    volumes:
      - grafana-storage:/var/lib/grafana       # Persistência de dashboards/configs
    depends_on:
      - prometheus
      - loki
    networks:
      - sentinel

  # Coleta e armazena métricas
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"                            # Interface do Prometheus
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml  # Config customizada
    networks:
      - sentinel

  # Armazena logs estruturados enviados pelo OpenTelemetry Collector
  loki:
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"                            # API do Loki
    command: -config.file=/etc/loki/config.yaml
    volumes:
      - ./config/loki-config.yaml:/etc/loki/config.yaml
    networks:
      - sentinel

  # Armazena traces distribuídos para visualização no Grafana
  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./config/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200:3200"  # Porta do Tempo para consulta via Grafana
    networks:
      - sentinel

  # OpenTelemetry Collector: recebe logs/traces/métricas da API e exporta
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ["--config=/etc/otel-config.yaml"]             # Aponta para o arquivo de configuração customizado
    volumes:
      - ./config/otel-config.yaml:/etc/otel-config.yaml     # Mapeamento da config do collector
    ports:
      - "4317:4317"  # OTLP gRPC (traces/logs)
      - "4318:4318"  # OTLP HTTP (traces/logs)
      - "9464:9464"  # Endpoint scrape de métricas para Prometheus
    depends_on:
      - prometheus
    networks:
      - sentinel

# Volumes persistentes usados por PostgreSQL e Grafana
volumes:
  grafana-storage:
  pgdata:

# Rede interna para conectar todos os serviços
networks:
  sentinel:

# ============================ DOCUMENTAÇÃO ============================
#
# Este docker-compose.yml orquestra uma stack de observabilidade completa:
#
# ✔ db: Banco PostgreSQL que armazena logs emitidos pela API.
# ✔ api: API Node.js que emite logs estruturados, traces e métricas com OpenTelemetry.
# ✔ prometheus: Coletor de métricas (Prometheus scrape → Otel Collector).
# ✔ loki: Armazena e permite consulta de logs estruturados (recebidos via Otel Collector).
# ✔ tempo: Armazena traces distribuídos, acessíveis via Grafana
# ✔ grafana: Interface unificada para dashboards e logs.
# ✔ otel-collector: Agente central de coleta/exportação OTLP (logs, métricas, traces).
#
# A stack é ideal para monitoramento moderno de aplicações com foco em DevOps observability.
